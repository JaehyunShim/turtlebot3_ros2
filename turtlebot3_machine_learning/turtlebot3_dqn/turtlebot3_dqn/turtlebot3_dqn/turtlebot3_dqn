#!/usr/bin/env python3
#
# Copyright 2019 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors: Ryan Shim, Gilbert

import collections
import json
from keras.layers import Activation
from keras.layers import Dense
from keras.layers import Dropout
from keras.models import Sequential
from keras.models import load_model
from keras.optimizers import RMSprop
import numpy
import os
import random
import rclpy
import sys
import time
from turtlebot3_dqn.turtlebot3_environment.environment_stage_1 import Environment
# 1env for 1, 2env for 2... 4env for 4

from std_msgs.msg import Float32MultiArray

sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))


class ReinforceAgent(Node):

    def __init__(self, state_size, action_size):
        super().__init__('turtlebot3_dqn')

        """************************************************************
        ** Initialise variables
        ************************************************************"""
        self.dirPath = os.path.dirname(os.path.realpath(__file__))
        self.dirPath = self.dirPath.replace('turtlebot3_dqn/nodes', 'turtlebot3_dqn/save_model/stage_1_')
        # stage1 for 1 stage2 for2, ... stage 4 for 4
        self.result = Float32MultiArray()
        self.get_action = Float32MultiArray()

        self.load_model = False
        self.load_episode = 0
        self.state_size = state_size
        self.action_size = action_size
        self.episode_step = 6000
        self.target_update = 2000
        self.discount_factor = 0.99
        self.learning_rate = 0.00025
        self.epsilon = 1.0
        self.epsilon_decay = 0.99
        self.epsilon_min = 0.05
        self.batch_size = 64
        self.train_start = 64
        self.memory = collections.deque(maxlen=1000000)

        self.model = self.buildModel()
        self.target_model = self.buildModel()

        """************************************************************
        ** Initialise ROS publishers and servers
        ************************************************************"""
        qos = QoSProfile(depth=10)

        # Initialise publishers
        self.result_pub = self.create_publisher(Float32MultiArray, 'result', qos)
        self.get_action_pub = self.create_publisher(Float32MultiArray, 'get_action', qos)

        self.updateTargetModel()

        if self.load_model:
            self.model.set_weights(load_model(self.dirPath+str(self.load_episode)+".h5").get_weights())

            with open(self.dirPath+str(self.load_episode)+'.json') as outfile:
                param = json.load(outfile)
                self.epsilon = param.get('epsilon')

        """************************************************************
        ** Initialise timers
        ************************************************************"""
        self.process_timer = self.create_timer(0.010, self.process_callback)  # unit: s

    """*******************************************************************************
    ** Callback functions and relevant functions
    *******************************************************************************"""
    def process_callback(self):
        state_size = 28  
        action_size = 5

        env = Environment(action_size)

        agent = ReinforceAgent(state_size, action_size)
        scores, episodes = [], []
        global_step = 0
        start_time = time.time()

        EPISODES = 3000

        for e in range(agent.load_episode + 1, EPISODES):
            done = False
            state = env.reset()
            score = 0
            for t in range(agent.episode_step):
                action = agent.getAction(state)

                next_state, reward, done = env.step(action)

                agent.appendMemory(state, action, reward, next_state, done)

                if len(agent.memory) >= agent.train_start:
                    if global_step <= agent.target_update:
                        agent.trainModel()
                    else:
                        agent.trainModel(True)

                score += reward
                state = next_state
                get_action.data = [action, score, reward]
                get_action_pub.publish(get_action)

                if e % 10 == 0:
                    agent.model.save(agent.dirPath + str(e) + '.h5')
                    with open(agent.dirPath + str(e) + '.json', 'w') as outfile:
                        json.dump(param_dictionary, outfile)

                if t >= 500:
                    rospy.loginfo("Time out!!")
                    done = True

                if done:
                    result.data = [score, np.max(agent.q_value)]
                    result_pub.publish(result)
                    agent.updateTargetModel()
                    scores.append(score)
                    episodes.append(e)
                    m, s = divmod(int(time.time() - start_time), 60)
                    h, m = divmod(m, 60)

                    rospy.loginfo('Ep: %d score: %.2f memory: %d epsilon: %.2f time: %d:%02d:%02d',
                                e, score, len(agent.memory), agent.epsilon, h, m, s)
                    param_keys = ['epsilon']
                    param_values = [agent.epsilon]
                    param_dictionary = dict(zip(param_keys, param_values))
                    break

                global_step += 1
                if global_step % agent.target_update == 0:
                    rospy.loginfo("UPDATE TARGET NETWORK")

            if agent.epsilon > agent.epsilon_min:
                agent.epsilon *= agent.epsilon_decay
