#!/usr/bin/env python3
#
# Copyright 2019 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors: Ryan Shim, Gilbert

import rclpy
from rclpy.qos import QoSProfile

from geometry_msgs.msg import Twist
from gazebo_msgs.msg import ModelState
from gazebo_msgs.msg import ModelStates


class DQNMovingObstacle():
    def __init__(self):
        super().__init__('dqn_moving_obstacle')

        """************************************************************
        ** Initialise ROS publishers and subscribers
        ************************************************************"""
        qos = QoSProfile(depth=10)

        # Initialise publishers
        self.model_state_pub = self.create_publisher(
            ModelState,
            'gazebo/set_model_state',
            qos)

        # Initialise subscribers
        self.model_state_sub = self.create_subscription(
            ModelStates,
            'gazebo/model_states',
            self.model_state_callback,
            qos)

    """*******************************************************************************
    ** Callback functions and relevant functions
    *******************************************************************************"""
    def model_state_callback(self, model):
        obstacle = ModelState()
        for i in range(len(model.name)):
            if model.name[i] == 'obstacle':
                obstacle.model_name = 'obstacle'
                obstacle.pose = model.pose[i]
                obstacle.twist = Twist()
                obstacle.twist.angular.z = 0.5
                self.model_state_pub.publish(obstacle)


def main(args=None):
    rclpy.init(args=args)
    dqn_moving_obstacle = DQNMovingObstacle()
    rclpy.spin(dqn_moving_obstacle)

    dqn_moving_obstacle.destroy()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
